# Список представляет собой набор элементов, следующих в определенном порядке.
# Вы можете создать список для хранения букв алфавита, цифр от 0 до 9 или имен 
# всех челнов вашей семьи. В список можно поместить любую информацию, причем 
# данные в списке даже не обязаны быть как-то связаны друг с другом. Так как 
# список обычно содержит более одного элемента, рекомендуется присваивать 
# спискам имена во множественном числе: letters, digits, names и т.д.

bicycles = ['trek', 'cannondale', 'redline', 'specialized'] # список
print(bicycles)

# Списки представляют собой упорядоченный набор данных, поэтому для обращения к 
# любому элементу списка следует сообщить Python позицию (индекс) нужного 
# элемента. Чтобы обратиться к элементу в списке, укажите имя списка, за которым 
# следует индекс элемента в квадратных скобках.

print(bicycles[0]) # так мы обращаемся к элементу списка

# Также можно использовать строковые методы с любым элементом списка.

print(bicycles[0].title())

# Python считает, что первый элемент списка находится в позиции 0, а не в 
# позиции 1. Этот принцип встречается в большинстве языков программирования и 
# объясняется особенностями низкоуровневой реализации операции со списками. 

print(bicycles[1])
print(bicycles[3])

# В Python также существует специальный синтаксис для обращения к последнему 
# элементу списка. Если запросить элемент с индексом -1, Python всегда 
# возвращает последний элемент в списке:

print(bicycles[-1])

# Отдельные значения из списка используются так же, как и любые другие 
# переменные.

message = f'My first bicycle was a {bicycles[0].title()}.'
print(message)